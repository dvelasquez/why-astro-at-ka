---
description: 
globs: *.md
alwaysApply: false
---
# Context Document for Presentation: "Re-thinking Next.js: Why We Picked Astro for Kleinanzeigen's High-Traffic Frontend"

**Speaker:** Danilo Velasquez, Staff Software Engineer @ Kleinanzeigen
**Event:** ReactJS Barcelona, June 10th, 2025
**Based on Blog Post:** "Why Kleinanzeigen.de Picked Astro Over Next.js" (d13z.dev) and additional provided details.

## 1. Core Narrative & Presentation Goal

This presentation tells the story of Kleinanzeigen.de's journey to modernize its frontend stack for Germany's largest classifieds site. Faced with a slow, cumbersome legacy Java/jQuery monolith and the pressures of rapid growth under new private equity ownership, the team needed a new frontend architecture. The talk details the evaluation process of Next.js, Deno/Fresh, and Astro, ultimately explaining why Astro's Island Architecture and self-hosting capabilities made it the right choice to address critical issues related to performance, developer velocity, and scalability for their high-traffic environment. The presentation aims to share real-world experiences, challenges, and the tangible benefits observed post-adoption.

## 2. Kleinanzeigen: The Business & Company Context

* **Platform:** Germany's #1 classifieds marketplace (formerly eBay Kleinanzeigen), with 16+ years of history and hundreds of millions of daily pageviews. Comparable to Wallapop/Milanuncios in Spain.
* **Current State:** A company in "adolescence" â€“ growing rapidly from ~10 to ~500 employees, transitioning from startup roots to a larger organization.
* **Ownership & Mandate:** Recently acquired by a Private Equity firm. The primary mandate is aggressive growth ("Grow, Grow, Grow!"), necessitating a "Value Creation Plan" that requires fundamental platform evolution and rapid feature delivery.
* **Previous Unification Project:** A major project to unify several international marketplaces onto a single, massive Next.js platform (the subject of the "Taming the CI Beast" blog series) was cancelled mid-2024 due to the change in ownership strategy. This prior experience provided deep (and sometimes painful) insights into the challenges of large-scale Next.js applications.

## 3. The Problem: The Legacy "Haunted Forest"

* **Existing Tech Stack (Pre-Astro):**
    * **Core Monolith:** A Java Springboot application with JSPs, Moustache templates.
    * **Frontend Core:** Primarily jQuery and vanilla JavaScript for main user journeys (homepage, search/listings, item details).
    * **Embedded Widgets:** Around 50 microfrontends/widgets built with Preact and TypeScript, developed and deployed independently, often as workarounds to avoid touching the monolith.
* **Key Pain Points:**
    * **Slow Time-to-Market:** Changes to core pages (Java pipeline, JSPs, jQuery) took 1 hour to a full day to release. Bug fixes/reverts also took at least an hour. This severely hampered business agility.
    * **Poor Developer Experience (DX):**
        * Fragile local development environments for the Java monolith, requiring frequent reinstalls, debugging, and recompilations.
        * Frontend developers forced to use unfamiliar backend tooling (e.g., Maven instead of npm).
        * High cognitive load.
    * **"Haunted Forest" Problem:** Teams actively avoided making changes to the core platform due to its complexity and slow development cycle, leading to more isolated widget development and impacting core user experience improvements.
    * **Stagnation & Technical Debt:** The core platform had seen minimal updates during the 1.5-year unification project, resulting in accumulated technical debt and a backlog of critical changes needed for the new growth strategy.
* **Business Impact:** The existing technology could not support the speed and scale of changes required by the new Value Creation Plan. Team morale was affected, and both product and engineering were constantly seeking ways *not* to change the core platform.

## 4. The Search for a Modern Frontend Solution

* **Primary Goal:** Evolve the entire platform, especially the core pages, with modern tools that enable rapid iteration and empower developers.
* **Key Requirements & Constraints:**
    * Leverage existing team skills: **React/Preact and TypeScript**.
    * Significantly improve **Developer Experience (DX)**.
    * Achieve substantial **web performance improvements** (Core Web Vitals).
    * **Excellent self-hosting support** was critical due to the massive scale (hundreds of millions of pageviews/day), making PaaS solutions like Vercel cost-prohibitive for the entire platform.
* **Evaluation Process:**
    * A dedicated platform team created a simple demo application (homepage, search results page, item details page).
    * Crucially, this demo integrated one of their existing complex Preact widgets (the GDPR banner, originally built with Webpack, TypeScript, Preact, and styled-jsx) to test real-world compatibility.

## 5. Contender Evaluation: Next.js vs. Deno/Fresh vs. Astro

### 5.1. Next.js

* **Pros:**
    * High team familiarity from the (cancelled) unification project.
    * Large community, strong React/Preact support.
    * Flexible CSS solutions; GDPR banner integrated without issues in the demo.
* **Cons (Learnings from "Taming the CI Beast" and Kleinanzeigen's specific needs):**
    * **Painful Upgrades at Scale:** Previous experience showed that upgrading large Next.js applications (React 17&rarr;18, Next.js v13&rarr;14&rarr;15) was a lengthy and difficult process.
    * **Self-Hosting Challenges:** Next.js's self-hosting support felt like an "afterthought." The framework appeared heavily optimized for Vercel, making self-hosting on Kleinanzeigen's infrastructure complex and requiring custom solutions that were prone to breaking during Next.js upgrades.
    * **Performance Bottlenecks (Hydration & Third Parties):**
        * The standard SSR &rarr; Hydration &rarr; Reconciliation model was problematic. Numerous third-party scripts (marketing, analytics, advertising) often manipulated the DOM before or during hydration.
        * This led to frequent layout repainting, hydration mismatches, and poor Core Web Vitals, especially on large, content-heavy pages with thousands of DOM nodes.
        * Achieving the goal of "sending as little JavaScript as possible" felt very difficult or required complex workarounds that were not stable across updates.
    * **React Server Components (RSCs):** At the time of the decision, RSCs were emerging but seemed like a complex solution rather than a direct answer to their primary need for minimal client-side JS on largely static pages.
    * **Generalist Framework:** Next.js was perceived as a good general-purpose framework but not optimally tailored for Kleinanzeigen's specific use case: high-traffic, content-heavy, SEO-critical pages that were mostly static.

### 5.2. Deno / Fresh

* **Pros:**
    * Intriguing paradigm: Preact components everywhere, SSR by default, aligning well with the "mostly static content" nature of many Kleinanzeigen pages.
    * Successful demo implementation, including GDPR banner integration.
    * Good developer experience in the demo.
    * TailwindCSS support (a requirement for the new design system).
* **Cons:**
    * **Smaller Community:** Significantly smaller ecosystem compared to Node.js.
    * **Maturity Concerns:** Fresh was very new at the time, leading to perceived risks regarding stability and long-term support.
    * **Internal Approval Hurdles:** Adopting Deno would have required a more extensive internal architecture approval process within the company.

### 5.3. Astro

* **Pros:**
    * **Island Architecture:** This was the standout feature. Astro's philosophy of sending HTML by default and only hydrating specific, isolated components (`<client:load>`, `<client:visible>`, etc.) directly addressed the core performance issues faced with Next.js (hydration complexity, third-party script interference). The principle: "Less JS = Faster Loads & Fewer Reconciliation Problems."
    * **UI Framework Agnostic:** Out-of-the-box support for React, Preact, Vue, Solid, Svelte, etc., offered flexibility for current needs (Preact) and future-proofing.
    * **Maturity & Excellent Self-Hosting:** A vibrant community, a more stable versioning history (at the time), and, critically, **first-class support for self-hosted Node.js deployments**.
    * Successful demo implementation, including GDPR banner integration (though `styled-jsx` SSR was a known limitation).
* **Cons/Considerations:**
    * **Learning Curve:** The `.astro` file syntax (frontmatter, JSX-like-but-not-quite templating) and the need to distinguish Astro components from framework components (like Preact) required an adjustment period for the team.
    * **New Tooling Ecosystem:** Astro is built on Vite and Vitest. The team's primary experience was with Webpack and Jest, meaning the platform team would need to support a new toolchain.
    * **Styled-JSX SSR Limitation:** Astro could not server-render components using `styled-jsx`. This meant existing Preact widgets using `styled-jsx` would render client-side initially, requiring a migration path to TailwindCSS for optimal performance.

## 6. The "Why Astro?" - Deep Dive into Island Architecture's Fit

* **The Problem Astro Solved (Specifically for Kleinanzeigen):**
    * Kleinanzeigen pages are often very long, with thousands of HTML nodes (e.g., search result pages with many listings, filters).
    * Multiple third-party scripts (monitoring, analytics, marketing, ads) are essential and actively modify the DOM on the client-side.
    * With Next.js, the entire React component tree for the page would hydrate, attempting to reconcile its VDOM with a browser DOM already altered by these scripts. This led to:
        * Multiple re-renders of the page in the browser.
        * Potential race conditions between React hydration and third-party scripts.
        * Degraded user performance and poor Core Web Vitals.
        * Making Next.js ship minimal JS for these scenarios was found to be very complex or involved fragile workarounds.
* **Astro's Approach as a Solution:**
    * SSR by default, sending primarily HTML to the user.
    * Client-side JavaScript is opt-in *per component* via directives like `<MyComponent client:load />`.
    * This means interactive elements ("islands") are small and isolated.
    * Third-party scripts are less likely to interfere with these smaller, targeted hydration scopes.
    * Result: Less JavaScript shipped, faster initial page loads, reduced complexity in the reconciliation process, and improved resilience against third-party script interference.

## 7. Decision, Rollout, and Implementation Strategy

* **Decision Process:**
    * Platform team created demos and evaluations.
    * An Architectural Decision Record (ADR) was drafted and opened as an RFC for 4 weeks, inviting comments from all web engineers in the Community of Practice (CoP).
    * **Astro was chosen.**
* **Adoption and PoC:**
    * Internal workshops were held to introduce Astro to interested engineers.
    * The team responsible for the Kleinanzeigen Homepage partnered with the platform team to rebuild the homepage using Astro as a Proof of Concept.
    * The new Astro-based homepage was gradually rolled out to production: 1% &rarr; 10% &rarr; 40% &rarr; 100% traffic, validating the approach.
* **Key Architectural Decisions:**
    * **Multi-App Architecture (No Single Monolith):**
        * Instead of one large Astro application, Kleinanzeigen opted for *several* independent Astro applications, each dedicated to a specific business domain/team (e.g., Homepage, Search, Item Details).
        * **Rationale:** Promotes team autonomy, allows independent release cycles, and avoids the scaling issues of a single large monolith.
        * **Platform Team Responsibility:** Increased workload for the platform team to manage multiple applications, ensure consistency, and provide robust tooling (e.g., application templates, shared library management).
    * **Shared Libraries & Monorepo:**
        * Common UI elements (header, footer) and utilities (metrics, analytics) are developed as versioned packages within a frontend monorepo.
        * Tooling: Lerna-Lite, Turborepo, npm workspaces, GitHub Actions.
        * RenovateBot is used to automatically create PRs in consuming applications when shared library versions are updated.
    * **Rendering Strategy: SSR over SSG:**
        * Primarily using Server-Side Rendering (SSR) with Astro's Node.js adapter.
        * SSG was deemed impractical for the bulk of the application due to the sheer volume of active ads (50+ million). Generating all these pages at build time would take an unacceptably long time (estimated 13,000+ hours if each page took 1 second).
        * SSG might be considered for specific, more static pages in the future.
    * **UI Framework: Preact over React:**
        * Preact was chosen as the primary UI framework for interactive islands.
        * Leveraged existing team experience with Preact from the MFE widgets.
        * Valued for its smaller bundle size, aligning with the goal of shipping less JavaScript.
        * React Server Components were not a direct fit with Astro's architecture at the time.
    * **Styling: Migration to TailwindCSS:**
        * A full move away from `styled-jsx` (and other solutions) to TailwindCSS.
        * Positive experience with TailwindCSS during the (cancelled) unification project.
        * Necessary due to `styled-jsx`'s SSR limitations in Astro and testing difficulties with Preact/Vitest/Testing Library.
        * TailwindCSS was adopted for the new company-wide design system.

## 8. Results and Developer Feedback

* **Developer Experience (DX) Improvements:**
    * **Onboarding Time:** Reduced from potentially days (for the Java monolith) to **less than 15 minutes** for the new Astro homepage application.
    * **CI/CD Pipeline Speed:**
        * Java App (Belen pipeline): ~15 minutes to deploy to non-prod/staging; full release cycle ~1 hour.
        * Astro App: Testing & linting ~1m 24s; E2E tests ~2m 17s; Build & deployment ~5 minutes. This massive speed-up allows for faster iteration and value delivery.
    * **Developer Quotes (Positive Overall):**
        * "+ fast startup + vitejs"
        * "Very smooth and easy to use."
        * "Overall I would describe it as positive."
        * "lower learning curve, nice concepts, fitting our purposes."
        * "Great! It is easy to install and run, documentation is also very good."
        * "very easy to learn coming from react with next.js experience"
        * "Nice and modern."
* **Web Performance:**
    * Slight improvement seen on the homepage compared to the already optimized Java platform (Lighthouse score from ~64/100 to ~69/100 on Astro *before* specific Astro performance tuning).
    * The Java version was already highly server-side rendered. The key win with Astro is the significant reduction in client-side JS by default, offering a strong foundation for future optimizations.
* **Reuse of Widgets/Microfrontends:**
    * Generally straightforward, as Astro outputs HTML, and widgets often just need a div to mount into.
    * Opportunity for improvement: Currently, each widget might bundle its own Preact version. Future goal: leverage a shared Preact instance provided by Astro.

## 9. Challenges Encountered and Lessons Learned

* **Astro Learning Curve:**
    * `.astro` syntax (frontmatter, JSX-like templating) can be initially confusing.
    * Concepts like Astro `defineAction()` and `input: z.object()` seemed "homegrown" to some and required learning.
    * Having internal experts (like Danilo) available for guidance was crucial.
* **Tooling Transition:** Moving from Webpack/Jest to Vite/Vitest required the platform team to support a new set of tools.
* **Testing `styled-jsx` with Preact/Vitest:** This combination proved problematic, reinforcing the decision to migrate to TailwindCSS.
* **Concerns about Long-Term Maintenance & Astro's Evolution:** Some developers expressed minor concerns about the frequency of potential breaking changes in Astro or the long-term stability of its concepts (though Astro's track record was generally seen as stable).
* **Astro's Server-Side Features:** One developer noted that built-in support for production server needs like monitoring, logging, and observability seemed less mature than desired, requiring custom setup (though this might be typical for Node.js server applications in general).
* **Multi-Application Architecture Overhead:** Managing multiple independent applications, while beneficial for team autonomy, means more coordination and automation work for the platform team to keep everything up-to-date and consistent.
* **Astro v5 Upgrade:** One developer mentioned the migration to v5 was "a bit of a rocky road," highlighting general npm/Node ecosystem pains rather than a specific Astro issue.

## 10. Key Message of the Talk

For a high-traffic, content-heavy platform like Kleinanzeigen, where performance, SEO, and developer velocity are paramount, and robust self-hosting is non-negotiable, Astro's Island Architecture provided a more targeted and effective solution than a general-purpose SSR framework like Next.js. The shift resulted in tangible improvements in DX, CI/CD speed, and a strong foundation for future performance gains, enabling the company to meet its ambitious growth objectives.

## 11. Target Audience Takeaways (When Astro might be a good fit for them)

* Their site is **content-heavy**, with large portions being static HTML.
* Their site is **not** a highly reactive Single Page Application with extensive real-time features dominating every page.
* They need **fine-grained control** over *which* parts of the UI are interactive to optimize performance (Island Architecture).
* **Minimizing client-side JavaScript** is a high priority for Core Web Vitals or user experience.
* They require excellent **self-hosting support** for Node.js and aren't tied to a specific deployment platform.
* They value the flexibility to **mix and match different UI frameworks** (React, Preact, Vue, etc.) within the same project or over time.
* They are facing performance challenges related to **hydration complexity and third-party script interference** in complex SSR applications.
* (Optionally, with a touch of humor) They are looking for a powerful alternative after encountering frustrations with Next.js at scale for similar use cases.

---